{
	"name": "avrotestbase64",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "evtcaptureinput",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Parse1"
				}
			],
			"script": "source(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],\n\t\tProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],\n\t\tBody as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 select(mapColumn(\n\t\tSequenceNumber,\n\t\tOffset,\n\t\tEnqueuedTimeUtc,\n\t\tSystemProperties,\n\t\tProperties,\n\t\tBody\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(BodyNew = toString(Body)) ~> DerivedColumn1\nDerivedColumn1 parse(json = BodyNew ? (app as string[]),\n\tformat: 'json',\n\tdocumentForm: 'documentPerLine') ~> Parse1"
		}
	}
}