{
	"name": "AzureMLSynapse",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "accsparkpools",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
				"name": "accsparkpools",
				"type": "Spark",
				"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import datetime  \n",
					"from azureml.core import Workspace, LinkedService, SynapseWorkspaceLinkedServiceConfiguration\n",
					"\n",
					"# Azure Machine Learning workspace\n",
					"ws = Workspace.from_config()\n",
					"\n",
					"#link configuration \n",
					"synapse_link_config = SynapseWorkspaceLinkedServiceConfiguration(\n",
					"    subscription_id=ws.subscription_id,\n",
					"    resource_group= 'mlops',\n",
					"    name='mlopsdev')\n",
					"\n",
					"# Link workspaces and register Synapse workspace in Azure Machine Learning\n",
					"linked_service = LinkedService.register(workspace = ws,              \n",
					"                                            name = 'mlopsdev',    \n",
					"                                            linked_service_config = synapse_link_config)"
				],
				"execution_count": null
			}
		]
	}
}