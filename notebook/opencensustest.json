{
	"name": "opencensustest",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mlspark3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.synapse.library.python.env": "name: example-environment\r\nchannels:\r\n  - conda-forge\r\ndependencies:\r\n  - python\r\n  - numpy\r\n  - pip\r\n  - pip:\r\n    - opencensus-ext-azure",
				"spark.synapse.library.python.env.name": "environment.yml"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/mlspark3",
				"name": "mlspark3",
				"type": "Spark",
				"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mlspark3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.0",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import logging\n",
					"from opencensus.ext.azure.log_exporter import AzureLogHandler\n",
					"\n",
					"logger = logging.getLogger(__name__)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# TODO: replace the all-zero GUID with your instrumentation key.\n",
					"logger.addHandler(AzureLogHandler(\n",
					"    connection_string='InstrumentationKey=1c202f5b-0b53-466f-b468-4645b9736f67')\n",
					")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"logger.warning(\"Sample from open census test 01\")\n",
					"logger.error(\"Sample from open census test 02\")\n",
					"#logger.log(\"Sample from open census test 03\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"from opencensus.ext.azure.trace_exporter import AzureExporter\n",
					"from opencensus.trace.samplers import ProbabilitySampler\n",
					"from opencensus.trace.tracer import Tracer"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"properties = {'custom_dimensions': {'key_1': 'value_1', 'key_2': 'value_2'}}\n",
					"\n",
					"# Use properties in exception logs\n",
					"try:\n",
					"    result = 1 / 0  # generate a ZeroDivisionError\n",
					"except Exception:\n",
					"    logger.exception('Captured an exception.', extra=properties)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [],
				"execution_count": null
			}
		]
	}
}