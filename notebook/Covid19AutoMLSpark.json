{
	"name": "Covid19AutoMLSpark",
	"properties": {
		"folder": {
			"name": "AzureML"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "accsparkpools",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 6,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "6",
				"spark.dynamicAllocation.maxExecutors": "6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c46a9435-c957-4e6c-a0f4-b9a597984773/resourceGroups/accenture/providers/Microsoft.Synapse/workspaces/bbaccsynapse/bigDataPools/accsparkpools",
				"name": "accsparkpools",
				"type": "Spark",
				"endpoint": "https://bbaccsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/accsparkpools",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import azureml.core\n",
					"\n",
					"from azureml.core import Experiment, Workspace, Dataset, Datastore\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from azureml.data.dataset_factory import TabularDatasetFactory"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"subscription_id = \"c46a9435-c957-4e6c-a0f4-b9a597984773\"\n",
					"resource_group = \"accenture\"\n",
					"workspace_name = \"accml\"\n",
					"experiment_name = \"bbaccsynapse-covid19-20201217032226\"\n",
					"\n",
					"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
					"experiment = Experiment(ws, experiment_name)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM default.covid19\")\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df = df.withColumn(\"_c5\", df[\"_c5\"].cast(DoubleType()).alias(\"_c5\"))\r\n",
					"df = df.withColumn(\"_c6\", df[\"_c6\"].cast(DoubleType()).alias(\"_c6\"))\r\n",
					"df = df.withColumn(\"_c7\", df[\"_c7\"].cast(DoubleType()).alias(\"_c7\"))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"datastore = Datastore.get_default(ws)\n",
					"dataset = TabularDatasetFactory.register_spark_dataframe(df, datastore, name = experiment_name + \"-dataset\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"automl_config = AutoMLConfig(spark_context = sc,\n",
					"                             task = \"regression\",\n",
					"                             training_data = dataset,\n",
					"                             label_column_name = \"_c7\",\n",
					"                             primary_metric = \"spearman_correlation\",\n",
					"                             experiment_timeout_hours = 3,\n",
					"                             max_concurrent_iterations = 6,\n",
					"                             enable_onnx_compatible_models = False)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"run = experiment.submit(automl_config)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"run.wait_for_completion(show_output=False)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"displayHTML(\"<a href={} target='_blank'>Your experiment in Azure Machine Learning portal: {}</a>\".format(run.get_portal_url(), run.id))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"run.wait_for_completion()\n",
					"\n",
					"# Install required dependency\n",
					"import pip\n",
					"pip.main([\"install\", \"azure-storage-blob==12.5.0\"])\n",
					"\n",
					"import mlflow\n",
					"\n",
					"# Get best model from automl run\n",
					"best_run, non_onnx_model = run.get_output()\n",
					"\n",
					"artifact_path = experiment_name + \"_artifact\"\n",
					"\n",
					"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
					"mlflow.set_experiment(experiment_name)\n",
					"\n",
					"with mlflow.start_run() as run:\n",
					"    # Save the model to the outputs directory for capture\n",
					"    mlflow.sklearn.log_model(non_onnx_model, artifact_path)\n",
					"\n",
					"    # Register the model to AML model registry\n",
					"    mlflow.register_model(\"runs:/\" + run.info.run_id + \"/\" + artifact_path, \"bbaccsynapse-covid19-20201217032226-Best\")"
				],
				"execution_count": 10
			}
		]
	}
}